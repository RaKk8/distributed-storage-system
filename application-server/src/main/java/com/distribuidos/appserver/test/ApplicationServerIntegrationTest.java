package com.distribuidos.appserver.test;

import com.distribuidos.appserver.service.DatabaseCommunicationService;
import com.distribuidos.appserver.service.StorageNodeCommunicationService;
import com.distribuidos.shared.service.AuthenticationService;
import com.distribuidos.shared.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.util.Map;

/**
 * Pruebas de integraci√≥n para el servidor de aplicaci√≥n.
 * Valida conectividad con BD y nodos, as√≠ como autenticaci√≥n.
 */
@Component
public class ApplicationServerIntegrationTest {
    
    @Autowired
    private DatabaseCommunicationService databaseService;
    
    @Autowired
    private StorageNodeCommunicationService nodeService;
    
    @Autowired
    private AuthenticationService authService;
    
    @PostConstruct
    public void runTests() {
        System.out.println("\nüß™ ===== PRUEBAS DE INTEGRACI√ìN - SERVIDOR DE APLICACI√ìN =====");
        
        boolean allTestsPassed = true;
        
        // Test 1: Conectividad con base de datos
        allTestsPassed &= testDatabaseConnectivity();
        
        // Test 2: Autenticaci√≥n de usuarios
        allTestsPassed &= testAuthentication();
        
        // Test 3: Descubrimiento de nodos RMI
        allTestsPassed &= testNodeDiscovery();
        
        // Test 4: Estad√≠sticas del sistema
        allTestsPassed &= testSystemStatistics();
        
        System.out.println("\nüìä ===== RESUMEN DE PRUEBAS =====");
        if (allTestsPassed) {
            System.out.println("‚úÖ TODAS LAS PRUEBAS PASARON - Sistema listo para producci√≥n");
        } else {
            System.out.println("‚ùå ALGUNAS PRUEBAS FALLARON - Revisar configuraci√≥n");
        }
        System.out.println("================================================\n");
    }
    
    private boolean testDatabaseConnectivity() {
        System.out.println("\nüîç Test 1: Conectividad con Base de Datos TCP");
        System.out.println("--------------------------------------------");
        
        try {
            boolean connected = databaseService.testConnection();
            
            if (connected) {
                System.out.println("‚úÖ Conexi√≥n TCP con base de datos: EXITOSA");
                return true;
            } else {
                System.out.println("‚ùå Conexi√≥n TCP con base de datos: FALL√ì");
                return false;
            }
        } catch (Exception e) {
            System.out.println("‚ùå Error en test de conectividad: " + e.getMessage());
            return false;
        }
    }
    
    private boolean testAuthentication() {
        System.out.println("\nüîê Test 2: Sistema de Autenticaci√≥n");
        System.out.println("------------------------------------");
        
        boolean allAuthTestsPassed = true;
        
        // Test usuarios v√°lidos
        String[] validUsers = {"admin", "juan", "maria"};
        String[] validPasswords = {"admin123", "juan123", "maria123"};
        
        for (int i = 0; i < validUsers.length; i++) {
            try {
                String token = authService.authenticate(validUsers[i], validPasswords[i]);
                if (token != null) {
                    User validatedUser = authService.validateToken(token);
                    
                    if (validatedUser != null && validatedUser.getUsername().equals(validUsers[i])) {
                        System.out.println("‚úÖ Autenticaci√≥n " + validUsers[i] + ": EXITOSA (token v√°lido)");
                    } else {
                        System.out.println("‚ùå Validaci√≥n de token " + validUsers[i] + ": FALL√ì");
                        allAuthTestsPassed = false;
                    }
                } else {
                    System.out.println("‚ùå Autenticaci√≥n " + validUsers[i] + ": FALL√ì");
                    allAuthTestsPassed = false;
                }
            } catch (Exception e) {
                System.out.println("‚ùå Error autenticando " + validUsers[i] + ": " + e.getMessage());
                allAuthTestsPassed = false;
            }
        }
        
        // Test usuario inv√°lido
        try {
            String token = authService.authenticate("invalid", "invalid");
            if (token == null) {
                System.out.println("‚úÖ Rechazo de credenciales inv√°lidas: EXITOSO");
            } else {
                System.out.println("‚ùå Rechazo de credenciales inv√°lidas: FALL√ì");
                allAuthTestsPassed = false;
            }
        } catch (Exception e) {
            System.out.println("‚ùå Error en test de credenciales inv√°lidas: " + e.getMessage());
            allAuthTestsPassed = false;
        }
        
        return allAuthTestsPassed;
    }
    
    private boolean testNodeDiscovery() {
        System.out.println("\nüåê Test 3: Descubrimiento de Nodos RMI");
        System.out.println("--------------------------------------");
        
        try {
            nodeService.discoverNodes();
            Map<String, Object> stats = nodeService.getNodesStatistics();
            
            int expectedNodes = (Integer) stats.get("expectedNodes");
            int discoveredNodes = (Integer) stats.get("discoveredNodes");
            long healthyNodes = (Long) stats.get("healthyNodes");
            
            System.out.println("üìä Nodos esperados: " + expectedNodes);
            System.out.println("üìä Nodos descubiertos: " + discoveredNodes);
            System.out.println("üìä Nodos saludables: " + healthyNodes);
            
            if (healthyNodes > 0) {
                System.out.println("‚úÖ Descubrimiento de nodos: EXITOSO (al menos un nodo disponible)");
                return true;
            } else {
                System.out.println("‚ö†Ô∏è Descubrimiento de nodos: SIN NODOS DISPONIBLES");
                System.out.println("   (Esto es normal si los nodos no est√°n ejecut√°ndose)");
                return true; // No falla el test ya que los nodos pueden no estar ejecut√°ndose
            }
        } catch (Exception e) {
            System.out.println("‚ùå Error en descubrimiento de nodos: " + e.getMessage());
            return false;
        }
    }
    
    private boolean testSystemStatistics() {
        System.out.println("\nüìà Test 4: Estad√≠sticas del Sistema");
        System.out.println("-----------------------------------");
        
        try {
            Map<String, Object> nodeStats = nodeService.getNodesStatistics();
            
            System.out.println("üìä Estad√≠sticas de nodos:");
            for (Map.Entry<String, Object> entry : nodeStats.entrySet()) {
                System.out.println("   " + entry.getKey() + ": " + entry.getValue());
            }
            
            System.out.println("‚úÖ Generaci√≥n de estad√≠sticas: EXITOSA");
            return true;
        } catch (Exception e) {
            System.out.println("‚ùå Error generando estad√≠sticas: " + e.getMessage());
            return false;
        }
    }
}